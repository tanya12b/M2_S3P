#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define VECTOR_SIZE 1000000 // Define the size of the vectors
#define NUM_THREADS 4 // Define the number of threads

// Structure to pass arguments to the thread function
typedef struct {
    int start;
    int end;
    int *v1;
    int *v2;
    int *v3;
} ThreadArgs;

// Thread function for vector addition
void* vector_addition(void* arg) {
    ThreadArgs* args = (ThreadArgs*) arg; // Cast argument to ThreadArgs structure

    // Perform vector addition
    for (int i = args->start; i < args->end; i++) {
        args->v3[i] = args->v1[i] + args->v2[i]; // Add corresponding elements and store in v3
    }

    pthread_exit(NULL); // Exit thread
}

int main() {
    int *v1, *v2, *v3; // Declare pointers for vectors
    pthread_t threads[NUM_THREADS]; // Declare an array of thread identifiers
    ThreadArgs args[NUM_THREADS]; // Declare an array of thread arguments

    // Allocate memory for vectors
    v1 = (int*)malloc(sizeof(int) * VECTOR_SIZE);
    v2 = (int*)malloc(sizeof(int) * VECTOR_SIZE);
    v3 = (int*)malloc(sizeof(int) * VECTOR_SIZE);

    // Initialize vectors v1 and v2
    for (int i = 0; i < VECTOR_SIZE; i++) {
        v1[i] = i; // Assign value to v1
        v2[i] = VECTOR_SIZE - i; // Assign value to v2
    }

    // Divide work among threads and perform vector addition
    for (int i = 0; i < NUM_THREADS; i++) {
        args[i].start = i * (VECTOR_SIZE / NUM_THREADS); // Calculate start index for thread
        args[i].end = (i + 1) * (VECTOR_SIZE / NUM_THREADS); // Calculate end index for thread
        args[i].v1 = v1; // Pass v1 to thread argument
        args[i].v2 = v2; // Pass v2 to thread argument
        args[i].v3 = v3; // Pass v3 to thread argument
        pthread_create(&threads[i], NULL, vector_addition, (void*)&args[i]); // Create thread
    }

    // Wait for all threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL); // Join thread
    }

    // Clean up
    free(v1); // Free memory allocated for v1
    free(v2); // Free memory allocated for v2
    free(v3); // Free memory allocated for v3

    return 0;
}
