#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define VECTOR_SIZE 1000000 // Define the size of the vectors

int main(int argc, char **argv)
{
    int rank, size;
    int *v1, *v2, *v3, *local_v1, *local_v2, *local_v3; // Declare pointers for vectors
    int local_size;

    MPI_Init(&argc, &argv); // Initialize MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get the rank of the current process
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get the total number of processes

    local_size = VECTOR_SIZE / size; // Calculate the local size for each process

    // Allocate memory for vectors
    v1 = (int *)malloc(sizeof(int) * VECTOR_SIZE);
    v2 = (int *)malloc(sizeof(int) * VECTOR_SIZE);
    v3 = (int *)malloc(sizeof(int) * VECTOR_SIZE); // All processes allocate memory for v3

    // Initialize vectors v1 and v2
    if (rank == 0)
    {
        // Only rank 0 initializes v1 and v2
        for (int i = 0; i < VECTOR_SIZE; i++)
        {
            v1[i] = i; // Assign value to v1
            v2[i] = VECTOR_SIZE - i; // Assign value to v2
        }
    }

    // Allocate memory for local vectors
    local_v1 = (int *)malloc(sizeof(int) * local_size);
    local_v2 = (int *)malloc(sizeof(int) * local_size);
    local_v3 = (int *)malloc(sizeof(int) * local_size);

    // Scatter v1 and v2 to all processes
    MPI_Scatter(v1, local_size, MPI_INT, local_v1, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(v2, local_size, MPI_INT, local_v2, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Perform local vector addition
    for (int i = 0; i < local_size; i++)
    {
        local_v3[i] = local_v1[i] + local_v2[i]; // Add corresponding elements and store in local_v3
    }

    // Gather local_v3 from all processes to v3 in rank 0
    MPI_Gather(local_v3, local_size, MPI_INT, v3, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Print result in rank 0
    if (rank == 0)
    {
        printf("Resultant vector (v3):\n");
        for (int i = 0; i < VECTOR_SIZE; i++)
        {
            printf("%d ", v3[i]); // Print each element of v3
        }
        printf("\n");
    }

    // Calculate local sum of v3
    int local_sum = 0;
    for (int i = 0; i < local_size; i++)
    {
        local_sum += local_v3[i]; // Calculate local sum
    }

    // Reduce all local sums to get the global sum
    int global_sum;
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Print global sum in rank 0
    if (rank == 0)
    {
        printf("Total sum of all elements in v3: %d\n", global_sum); // Print global sum
    }

    // Clean up
    free(v1); // Free memory allocated for v1
    free(v2); // Free memory allocated for v2
    free(v3); // Free memory allocated for v3
    free(local_v1); // Free memory allocated for local_v1
    free(local_v2); // Free memory allocated for local_v2
    free(local_v3); // Free memory allocated for local_v3

    MPI_Finalize(); // Finalize MPI
    return 0;
}
